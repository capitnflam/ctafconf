#!/bin/bash
##
## ct-install.sh
## Login : <ctaf@localhost.localdomain>
## Started on  Tue Apr 11 13:55:03 2006 GESTES Cedric
## $Id$
##
## Copyright (C) 2006 GESTES Cedric
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##


mode="$1"

grkdir=~/.config/ctafconf/etc/grk

#catch a signal, else termcaps shit
_trap_kill ()
{
  echo killing
  exit 0
}
trap _trap_kill INT

#PKG FUNCTION
pkg_description()
{
  local name="$@"

  eval $name"_description"
  return $?
}

pkg_is_installed()
{
  local name="$@"

  eval $name"_is_installed"
  return $?
}

pkg_install()
{
  local name=$@

  echo installing package: $name
  eval $name"_install"
  return $?
}

pkg_uninstall()
{
  local name=$@

  eval $name"_uninstall"
  return $?
}

pkg_alwaysinstall()
{
  local name=$@

  eval $name"_alwaysinstall"
  return $?
}

pkg_source()
{
  local name=$@

  . "$grkdir"/"$name".grk
}


#0 installed
#1 already installed
#2 failed
grk_install()
{
  local name=$1
  local inst=$2
  local ret

  pkg_source $name

  if [ x$inst = xno ] || pkg_is_installed $name; then
    ret=1
  else
    if pkg_install $name; then
      ret=0
    else
      ret=2
    fi
  fi
  if ! pkg_alwaysinstall $name ; then
    ret=2
  fi
  return $ret
}

#list installed pkg
grk_installed_list()
{
  ls -1 "$grkdir" | grep ".grk$" | while read line; do
    name=`echo $line | sed -e s/.grk//`
    pkg_source $name
    if pkg_is_installed $name >/dev/null; then
      echo "$name"
    fi
  done
}

pkg_is_backlisted()
{
  local pkgname=$1

  echo $ctafconf_backlist | grep $pkgname >/dev/null 2>/dev/null
  return $?
}

grk_not_installed_list()
{
  ls -1 "$grkdir" | grep ".grk$" | while read line; do
    name=`echo $line | sed -e s/.grk//`
    pkg_source $name
    if ! pkg_is_backlisted $name && ! pkg_is_installed $name >/dev/null; then
      echo "$name"
    fi
  done
}

grk_package_list()
{
  ls -1 "$grkdir" | grep ".grk$" | while read line; do
    name=`echo $line | sed -e s/.grk//`
    pkg_source "$name"
    if ! pkg_is_backlisted "$name" >/dev/null; then
      echo "$name"
    fi
  done
}
grk_install_all()
{
  ls -1 "$grkdir" | grep ".grk$" | while read line; do
    name=`echo $line | sed -e s/.grk//`
    pkg_source "$name"
    if ! pkg_is_backlisted "$name" >/dev/null 2>/dev/null; then
      pkg_install "$name"
    fi
    pkg_alwaysinstall "$name"
  done
}

grk_help()
{
  echo "help"
  ssft_select_single "Package description" \
                     "Select packages you want help for" \
                     `ls -1 $grkdir | grep ".grk$" | sed -e s/.grk//`
  name=$SSFT_RESULT
  pkg_source "$name"
  ssft_display_message "$name description" "`pkg_description $name`"
}


check_app()
{
  local app="$1"
  local comment="$2"
  if ! which $app 2>/dev/null >/dev/null ; then
    msg="ct-installconf: Can't find the command '$app' on your system !!!!
$comment"
    ssft_display_message "WARNING" "$msg"
    return 1
  fi
  return 0
}

#env merge'o'matic
env_mom()
{
  dirsys=~/.config/ctafconf/etc/shell/env.sys
  dirusr=~/.config/ctafconf/perso/env
  local tmp;
  if ! [ -d "$dirusr" ]; then
    mkdir "$dirusr" >/dev/null 2>/dev/null
  fi
  ls "$dirsys/" | grep ".sys.env$" | while read fn; do
    if [ -f "$dirusr/$fn" ]; then
      tmp="$dirusr/$fn.tmp";
      mv "$dirusr/$fn" "$tmp"
      ~/.config/ctafconf/bin/mom.pl "$dirsys/$fn" "$tmp" > "$dirusr/$fn"
      rm "$tmp"
    elif [ -f "$dirusr/$fn.disable" ]; then
      tmp="$dirusr/$fn.disable.tmp";
      mv "$dirusr/$fn.disable" "$tmp"
      ~/.config/ctafconf/bin/mom.pl "$dirsys/$fn" "$tmp" > "$dirusr/$fn.disable"
      rm "$tmp"
    else
      cp "$dirsys/$fn" "$dirusr/$fn.disable"
    fi
  done;
}

#fun merge'o'matic
fun_mom()
{
  dirsys=~/.config/ctafconf/etc/shell/fun.sys
  dirusr=~/.config/ctafconf/perso/fun
  local tmp;
  if ! [ -d "$dirusr" ]; then
    mkdir "$dirusr" >/dev/null 2>/dev/null
  fi
  ls "$dirsys/" | grep ".sys.fun$" | while read fn; do
    if [ -f "$dirusr/$fn" ]; then
      tmp="$dirusr/$fn.tmp";
      mv "$dirusr/$fn" "$tmp"
      ~/.config/ctafconf/bin/mom.pl "$dirsys/$fn" "$tmp" > "$dirusr/$fn"
      rm "$tmp"
    elif [ -f "$dirusr/$fn.disable" ]; then
      tmp="$dirusr/$fn.disable.tmp";
      mv "$dirusr/$fn.disable" "$tmp"
      ~/.config/ctafconf/bin/mom.pl "$dirsys/$fn" "$tmp" > "$dirusr/$fn.disable"
      rm "$tmp"
    else
      cp "$dirsys/$fn" "$dirusr/$fn"
    fi
  done;
}

#############################################################################
##START
#############################################################################
ctconfdir=~/.config/ctafconf
if ! [ -d "$ctconfdir" ] ; then
  echo "Can't find ~/.config/ctafconf directory"
  echo "Aborting, you should put the ctafconf folder of your tarball into ~/.config"
  exit
fi

#install tools
. ~/.config/ctafconf/etc/shlib/grktools.sh


#shellscript frontend
. ~/.config/ctafconf/etc/shlib/ssft.sh


#shell tool
. ~/.config/ctafconf/etc/shlib/shelltools.sh sh



#create default directory
grk_dir ~/.config/ctafconf/perso
grk_dir ~/.config/ctafconf/perso/semantic
grk_dir ~/.config/ctafconf/perso/ssh
grk_dir ~/.config/ctafconf/perso/repos
grk_dir ~/.config/ctafconf/perso/wallpaper
grk_dir ~/.config/ctafconf/perso/bin
grk_dir ~/.config/ctafconf/perso/previous
grk_dir ~/.config/ctafconf/perso/emacs-backup

if ! [ -f ~/.config/ctafconf/perso/user-profile ] ; then
  cp ~/.config/ctafconf/etc/mine/user-profile.mine ~/.config/ctafconf/perso/user-profile
fi

if ! [ -f ~/.config/ctafconf/perso/emacs.config ] ; then
  cp ~/.config/ctafconf/etc/emacs/emacs.config ~/.config/ctafconf/perso/emacs.config
fi

. ~/.config/ctafconf/perso/user-profile

if ! [ -f ~/.config/ctafconf/perso/wallpaper.jpg ] ; then
  cp ~/.config/ctafconf/etc/wallpaper/ctafconf-psycho.jpg ~/.config/ctafconf/perso/wallpaper.jpg
fi

if [ x$mode = xupdate ] ; then
  env_mom
  fun_mom
  grk_install_all
  currentcid=$(cd ~/.config/ctafconf ; git rev-list 'HEAD^1..HEAD' 2>/dev/null)
  echo "$currentcid" > ~/.config/ctafconf/perso/installed
  exit 0
fi

if [ x$mode = x-h ] || [ x$mode = x--help ] ; then
  echo "usage: ct-installconf [mode]"
  echo "console mode could be: console, dialog, text"
  echo "graphic mode could be: graphic, zenity, kdialog"
  echo "if you have problem with the default mode use text"
  exit 0
fi

if [ x$mode = x ]; then
  export SSFT_FRONTEND="console"
else
  export SSFT_FRONTEND="$mode"
fi

echo "using mode: $SSFT_FRONTEND, try -h for help about mode, or if that one doesnt work"

check_app "env" "env allow colormake/gmake/svn/cvs to work."
check_app "bash" "bash is needed for colormake/gmake/svn/cvs"
check_app "zsh" "With zsh you will get a better shell(better completion) although this is optional"
check_app "perl" "perl is needed for colormake/gmake/svn/cvs"
check_app "sed" "sed is needed by lot of shell script"
check_app "awk" "awk is needed by lot of shell script"
check_app "xargs" "xargs is needed by lot of shell script"
check_app "diff" "diff is needed by lot of shell script"
check_app "cut" "cut is needed by lot of shell script"
check_app "cal" "cal is needed by lot ct-date to display reminding events"
check_app "most" "most replace less, better pager, it allow man page coloration"
check_app "dialog" "dialog allow script to use a window system in console, it could be used in all ctafconf program"

env_mom
fun_mom

grk_install_all

currentcid=$(cd ~/.config/ctafconf ; git rev-list 'HEAD^1..HEAD' 2>/dev/null)
echo "$currentcid" > ~/.config/ctafconf/perso/installed

msg="You can change some setting's using ct-profile (for example your zsh prompt, the email used in newly create files in emacs)
If do not run gdm/kdm, you may want support for xsession/startx, you should remove xsession from the backlist with ct-profile"
ssft_display_message "Information" "$msg"
